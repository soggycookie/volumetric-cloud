#pragma kernel CSWorley3D
#pragma kernel CSWorley2D
#pragma kernel CSPerlin3D
#pragma kernel CSPerlin2D
#pragma kernel CSPerlinWorley3D
#pragma kernel CSPerlinWorley2D
#pragma kernel CSShape
#pragma kernel CSDetail
#pragma kernel CSWeather2D

//#include "SimplexNoise.cginc"
//#include "PerlinNoise.cginc"

RWTexture3D<float4> _rt3D;
RWTexture2D<float4> _rt2D;
RWTexture2D<float4> _weather2D;

uint3 _Resolution;
uint _Density;
int _Octave;
uint _ActiveChannel;
uint _Seed;
bool _IsInverted;

float _Lacunarity;
float _Persistence;
float _AngleOffset;
float _Scale;
float _Exponent;

float3 _Randomness;
float _FallOff;
float _LowAltitudeCloudBias;
float _MediumAltitudeCloudBias;
float _HighAltitudeCloudBias;
float _SmallCloudBias;
float3 _WorldSpacePos;
//claude or sum shit, totally forgor the source
float3 hash33(float3 p, uint seed)
{
    p = p + seed * float3(0.17, 0.83, 0.31);
    
    p = float3(dot(p, float3(127.1, 311.7, 74.7)),
               dot(p, float3(269.5, 183.3, 246.1)),
               dot(p, float3(113.5, 271.9, 124.6)));

    return -1.0 + 2.0 * frac(sin(p) * 43758.5453123);
}

//https://github.com/tooll3/Resources/blob/master/hash-functions.hlsl
float2 hash22(float2 p, uint seed)
{
    p += float2(seed * 0.1, seed * 0.31);
    
    float3 p3 = frac(float3(p.xyx) * float3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.xx + p3.yz) * p3.zy);
}

float remap(float v, float l0, float h0, float l1, float h1)
{
    return l1 + (v - l0) * (h1 - l1) / (h0 - l0);
}

float2 remap(float2 value, float2 inMin, float2 inMax, float2 outMin, float2 outMax)
{
    return outMin + (value - inMin) * (outMax - outMin) / (inMax - inMin);
}

float3 remap(float3 value, float3 inMin, float3 inMax, float3 outMin, float3 outMax)
{
    return outMin + (value - inMin) * (outMax - outMin) / (inMax - inMin);
}

float clamp(float x)
{
    return x < 0.0 ? 0.0 : x > 1.0 ? 1.0 : x;
}

int2 mod(int2 x, uint y)
{
    x.x = x.x < 0 ? (y - 1) : (x.x % y);
    x.y = x.y < 0 ? (y - 1) : (x.y % y);

    return x;
}

int3 mod(int3 x, uint y)
{
    x.x = x.x < 0 ? (y - 1) : (x.x % y);
    x.y = x.y < 0 ? (y - 1) : (x.y % y);
    x.z = x.z < 0 ? (y - 1) : (x.z % y);

    return x;
}

float3 mod(float3 x, float3 y)
{
    return x - y * floor(x / y);
}

float4 channelMask(float noise, float4 baseColor)
{
    float R = baseColor.x;
    float G = baseColor.y;
    float B = baseColor.z;
    float A = baseColor.w;
    //0011

    uint bitmaskR = (uint)1 << 0; //0001      
    uint activeRedChannel = bitmaskR & _ActiveChannel;
    if (activeRedChannel == 1)
        R = noise;

    uint bitmaskG = (uint)1 << 1; //0010
    uint activeGreenChannel = bitmaskG & _ActiveChannel; //0010
    if (activeGreenChannel == 2)
        G = noise;

    uint bitmaskB = (uint)1 << 2;
    uint activeBlueChannel = bitmaskB & _ActiveChannel;
    if (activeBlueChannel == 4)
        B = noise;

    uint bitmaskA = (uint)1 << 3;
    uint activeAlphaChannel = bitmaskA & _ActiveChannel;
    if (activeAlphaChannel == 8)
        A = noise;

    return float4(R, G, B, A);
}

//https://www.shadertoy.com/view/3dVXDc
float gradientNoise(float3 x, float freq)
{
    // grid
    float3 p = floor(x);
    float3 w = frac(x);

    // quintic interpolant
    float3 u = w * w * w * (w * (w * 6. - 15.) + 10.);

    // gradients
    float3 ga = hash33(mod(p + float3(0., 0., 0.), freq), _Seed);
    float3 gb = hash33(mod(p + float3(1., 0., 0.), freq), _Seed);
    float3 gc = hash33(mod(p + float3(0., 1., 0.), freq), _Seed);
    float3 gd = hash33(mod(p + float3(1., 1., 0.), freq), _Seed);
    float3 ge = hash33(mod(p + float3(0., 0., 1.), freq), _Seed);
    float3 gf = hash33(mod(p + float3(1., 0., 1.), freq), _Seed);
    float3 gg = hash33(mod(p + float3(0., 1., 1.), freq), _Seed);
    float3 gh = hash33(mod(p + float3(1., 1., 1.), freq), _Seed);

    // projections
    float va = dot(ga, w - float3(0., 0., 0.));
    float vb = dot(gb, w - float3(1., 0., 0.));
    float vc = dot(gc, w - float3(0., 1., 0.));
    float vd = dot(gd, w - float3(1., 1., 0.));
    float ve = dot(ge, w - float3(0., 0., 1.));
    float vf = dot(gf, w - float3(1., 0., 1.));
    float vg = dot(gg, w - float3(0., 1., 1.));
    float vh = dot(gh, w - float3(1., 1., 1.));

    // interpolation
    return va +
        u.x * (vb - va) +
        u.y * (vc - va) +
        u.z * (ve - va) +
        u.x * u.y * (va - vb - vc + vd) +
        u.y * u.z * (va - vc - ve + vg) +
        u.z * u.x * (va - vb - ve + vf) +
        u.x * u.y * u.z * (-va + vb + vc - vd + ve - vf - vg + vh);
}

float worley2D(float2 uv, float density)
{
    float minDst = 100;

    float2 st = uv * density;
    float2 i_st = floor(st);

    for (int x = -1; x <= 1; x++)
    {
        for (int y = -1; y <= 1; y++)
        {
            int2 neighbor = i_st + int2(x, y);
            int2 warpedNeighbor = mod(neighbor, density);
            float2 offsetPoint = float2(0.5, 0.5)
                + remap(hash22(warpedNeighbor, _Seed), float2(0, 0), float2(1, 1), float2(-0.5, -0.5), float2(0.5, 0.5))
                * _AngleOffset;

            float dst = length(st - (neighbor + offsetPoint));
            minDst = min(minDst, dst);
        }
    }
    minDst = clamp(minDst);

    if (_IsInverted == 1)
        minDst = 1 - minDst;

    return minDst;
}

float worley3D(float3 uvw, float density)
{
    float sqrt3 = sqrt(3);
    float minDst = 100;

    float3 stz = uvw * density;
    float3 i_stz = floor(stz);

    for (int x = -1; x <= 1; x++)
    {
        for (int y = -1; y <= 1; y++)
        {
            for (int z = -1; z <= 1; z++)
            {
                int3 neighbor = i_stz + int3(x, y, z);
                int3 warpedNeighbor = mod(neighbor, density);
                float3 offsetPoint = float3(0.5, 0.5, 0.5)
                    + remap(hash33(warpedNeighbor, _Seed), float3(-1, -1, -1), float3(1, 1, 1), float3(-0.5, -0.5, -0.5),
                            float3(0.5, 0.5, 0.5))
                    * _AngleOffset;

                float dst = length(stz - (neighbor + offsetPoint));


                minDst = min(minDst, dst);
            }
        }
    }

    minDst = clamp(minDst);

    if (_IsInverted == 1)
        minDst = 1 - minDst;


    return minDst;
}

float worley2DFBM(float2 uv, float density)
{
    return worley2D(uv, density) * 0.625 + worley2D(uv, density * 2) * 0.25 + worley2D(uv, density * 4) * 0.125;
}

float worley3DFBM(float3 uvw, float density)
{
    return worley3D(uvw, density) * 0.625 + worley3D(uvw, density * 2) * 0.25 + worley3D(uvw, density * 4) * 0.125;
}


void assignTex3D(float3 id, float noise)
{
    if (_ActiveChannel != 0)
    {
        _rt3D[id.xyz] = channelMask(noise, _rt3D[id.xyz]);
    }
    else
    {
        _rt3D[id.xyz] = _rt3D[id.xyz];
    }
}

void assignTex2D(float2 id, float noise)
{
    if (_ActiveChannel != 0)
    {
        _rt2D[id.xy] = channelMask(noise, _rt2D[id.xy]);
    }
    else
    {
        _rt2D[id.xy] = _rt2D[id.xy];
    }
}

[numthreads(8,8,8)]
void CSWorley3D(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _Resolution.x || id.y >= _Resolution.y || id.z >= _Resolution.z)
        return;

    float s = _Resolution.x / float(_Resolution.z);
    float3 uvw = id.xyz / float3(_Resolution) / float3(1, 1, s);


    float amp = 1.0;
    float fre = 1.0;

    float noise = 0;
    float maxVal = 0;
    for (int i = 0; i < (int)_Octave; i++)
    {
        noise += worley3D(uvw, _Density * _Scale * fre) * amp;
        maxVal += amp;

        amp *= _Persistence;
        fre *= _Lacunarity;
    }

    noise /= maxVal;

    //noise = noise1 * 0.625 + noise2 * .25 + noise3 * .125;
    //noise = noise1;
    noise = pow(noise, _Exponent);

    assignTex3D(id, noise);
}

[numthreads(8,8,1)]
void CSWorley2D(uint3 id : SV_DispatchThreadID)
{
    if (id.x > _Resolution.x || id.y > _Resolution.y)
        return;

    float s = _Resolution.x / float(_Resolution.y);

    float2 uv = id.xy / float2(_Resolution.xy) / float2(1, s);
    float amp = 1.0;
    float fre = 1.0;

    float noise = 0;
    float maxVal = 0;
    for (int i = 0; i < (int)_Octave; i++)
    {
        noise += worley2D(uv, _Density * _Scale * fre) * amp;
        maxVal += amp;

        amp *= _Persistence;
        fre *= _Lacunarity;
    }

    noise /= maxVal;

    noise = pow(noise, _Exponent);


    //float noise = worley2D(uv, _Density);
    //_rt2D[id.xy] = noise;
    assignTex2D(id.xy, noise);
}

[numthreads(8,8,8)]
void CSPerlin3D(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _Resolution.x || id.y >= _Resolution.y || id.z >= _Resolution.z)
        return;

    float s = _Resolution.x / float(_Resolution.z);
    float3 uvw = id.xyz / float3(_Resolution) / float3(1, 1, s);

    float amp = 1;
    float fre = 1.0;


    float noise = 0;
    float maxVal = 0;
    for (int i = 0; i < (int)_Octave; i++)
    {
        noise += gradientNoise(uvw * _Density * _Scale * fre, _Density * fre) * amp;
        maxVal += amp;

        amp *= _Persistence;
        fre *= _Lacunarity;
    }

    noise /= maxVal;
    noise = remap(noise, -0.7, 0.7, 0, 1) ;
    noise = smoothstep(0, 1, noise);
    noise = pow(noise, _Exponent);

    assignTex3D(id, noise);
}

[numthreads(8,8,1)]
void CSPerlin2D(uint3 id : SV_DispatchThreadID)
{
    if (id.x > _Resolution.x || id.y > _Resolution.y)
        return;

    float s = _Resolution.x / float(_Resolution.y);
    float2 uv = id.xy / float2(_Resolution.xy) / float2(1, s);

    float amp = 1.0;
    float fre = 1.0;
    float G = exp2(-0.85);
    float noise = 0;
    float maxVal = 0;
    for (int i = 0; i < (int)_Octave; i++)
    {
        noise += gradientNoise(float3(uv, 1) * _Density * _Scale * fre, _Density * fre) * amp;
        maxVal += amp;

        //amp *= G;
        amp *= _Persistence;
        fre *= _Lacunarity;
    }

    //noise /= maxVal;
    //noise = remap(noise, -0.707, 0.707, 0, 1);
    noise = noise * 0.5 + 0.5;

    noise = pow(noise, _Exponent);
    noise = smoothstep(0, 1, noise);

    assignTex2D(id.xy, noise);
}

[numthreads(8,8,8)]
void CSPerlinWorley3D(uint3 id : SV_DispatchThreadID)
{
    if (id.x > _Resolution.x || id.y > _Resolution.y || id.z > _Resolution.z)
        return;

    float s = _Resolution.x / float(_Resolution.z);
    float3 uvw = id.xyz / float3(_Resolution) / float3(1, 1, s);

    float amp = 1.0;
    float fre = 1.0;

    float G = exp2(-0.85);

    float noise = 0;
    float maxVal = 0;
    for (int i = 0; i < (int)_Octave; i++)
    {
        float n;
        n = gradientNoise(uvw * _Density * _Scale * fre, _Density * fre) * amp;

        noise += n * amp;
        maxVal += amp;

        amp *= G;
        fre *= _Lacunarity;
    }

    noise = lerp(1, noise, .5);
    noise = abs(noise * 2. - 1.);


    float worley = worley3DFBM(uvw, _Density * _Scale);
    noise = remap(noise, 0, 1, worley, 1);
    noise = pow(noise, _Exponent);
    //noise = smoothstep(0, 1, noise);

    assignTex3D(id, noise);
}

[numthreads(8,8,1)]
void CSPerlinWorley2D(uint3 id : SV_DispatchThreadID)
{
    if (id.x > _Resolution.x || id.y > _Resolution.y)
        return;

    float s = _Resolution.x / float(_Resolution.y);
    float2 uv = id.xy / float2(_Resolution.xy) / float2(1, s);

    float amp = 1.0;
    float fre = 1.0;

    float noise = 0;
    float maxVal = 0;
    for (int i = 0; i < (int)_Octave; i++)
    {
        noise += gradientNoise(float3(uv, 1) * _Density * _Scale * fre, _Density * fre) * amp;
        maxVal += amp;

        amp *= _Persistence;
        fre *= _Lacunarity;
    }

    noise /= maxVal;
    noise = remap(noise, -0.707, 0.707, 0, 1);
    noise = tan(noise);
    noise = clamp(noise);

    float worley = worley2DFBM(uv, _Density * _Scale);
    noise = worley * noise;
    noise = pow(noise, _Exponent);
    noise = smoothstep(0, 1, noise);

    assignTex2D(id.xy, noise);
}

[numthreads(8,8,8)]
void CSShape(uint3 id : SV_DispatchThreadID)
{
    if (id.x > _Resolution.x || id.y > _Resolution.y || id.z > _Resolution.z)
        return;

    float3 uvw = id.xyz / float3(_Resolution);
    
    float amp = 1.0;
    float fre = 1.0;

    float worley1 = 0;
    float worley2 = 0;
    float worley3 = 0;
    float perlin = 0;

    
    float maxVal = 0;
    
    for (int i = 0; i < _Octave; i++)
    {
        worley1 += worley3D(uvw, _Density * fre) * amp;
        maxVal += amp;

        amp *= _Persistence;
        fre *= _Lacunarity;
    }

    worley1 /= maxVal;

    amp = 1;
    fre = 1;
    maxVal = 0;
    
    for (int i = 0; i < _Octave; i++)
    {
        worley2 += worley3D(uvw, _Density * 2 * fre) * amp;
        maxVal += amp;
    
        amp *= _Persistence;
        fre *= _Lacunarity;
    }

    worley2 /= maxVal;
    
    amp = 1;
    fre = 1;
    maxVal = 0;
    
    for (int i = 0; i < _Octave; i++)
    {
        worley3 += worley3D(uvw, _Density * 4 * fre) * amp;
        maxVal += amp;
    
        amp *= _Persistence;
        fre *= _Lacunarity;
    }
    
    worley3 /= maxVal;

    amp = 1;
    fre = 1;
    maxVal = 0;
    for (int i = 0; i < 7; i++)
    {
        perlin += gradientNoise(uvw * _Density  * fre , _Density * fre ) * amp;
        maxVal += amp;

        amp *= _Persistence;
        fre *= _Lacunarity;
    }
    perlin /= maxVal;
    perlin = remap(perlin, -0.4, 0.4, 0, 1);
    //perlin = abs(perlin);
    //perlin = lerp(1, perlin, 0.5);
    //perlin = abs(perlin * 2 - 1 );
    //perlin = remap(perlin,  0, 1, 1 -worley1 , 1);
    perlin = remap(perlin,  worley1 - 1, 1, 0 , 1);
    perlin = smoothstep(0, 1, perlin);
    
    float4 col = float4(0, 0 ,0, 0); 

    col.x = perlin;
    col.y = worley1;
    col.z = worley2;
    col.w = worley3;
    
    _rt3D[id.xyz] = col;
}

[numthreads(8,8,8)]
void CSDetail(uint3 id : SV_DispatchThreadID)
{
    if (id.x > _Resolution.x || id.y > _Resolution.y || id.z > _Resolution.z)
        return;

    if (id.x > _Resolution.x || id.y > _Resolution.y || id.z > _Resolution.z)
        return;

    float3 uvw = id.xyz / float3(_Resolution);
    
    float amp = 1.0;
    float fre = 1.0;

    float worley1 = 0;
    float worley2 = 0;
    float worley3 = 0;

    
    float maxVal = 0;
    
    for (int i = 0; i < 3; i++)
    {
        worley1 += worley3D(uvw, _Density * fre) * amp;
        maxVal += amp;

        amp *= _Persistence;
        fre *= _Lacunarity;
    }

    worley1 /= maxVal;

    amp = 1;
    fre = 1;
    maxVal = 0;
    
    for (int i = 0; i < 3; i++)
    {
        worley2 += worley3D(uvw, _Density * 2 * fre) * amp;
        maxVal += amp;
    
        amp *= _Persistence;
        fre *= _Lacunarity;
    }

    worley2 /= maxVal;
    
    amp = 1;
    fre = 1;
    maxVal = 0;
    
    for (int i = 0; i < 3; i++)
    {
        worley3 += worley3D(uvw, _Density * 4 * fre) * amp;
        maxVal += amp;
    
        amp *= _Persistence;
        fre *= _Lacunarity;
    }
    
    worley3 /= maxVal;
    
    
    float4 col = float4(0, 0 ,0, 0); 
    
    col.x = worley1;
    col.y = worley2;
    col.z = worley3;
    
    _rt3D[id.xyz] = col;
}

[numthreads(8,8,1)]
void CSWeather2D(uint3 id : SV_DispatchThreadID)
{
    if (id.x > _Resolution.x || id.y > _Resolution.y)
    {
        return;
    }

    float2 uv = (id.xy + _WorldSpacePos.xy  ) / float2(_Resolution.xy);

    float4 noise = float4(0, 0, 0, 0);
    float worley = 0;
    worley += worley2D(uv, _Density ) * 0.625;
    worley += worley2D(uv, _Density * 2) * 0.25;
    worley += worley2D(uv, _Density * 4) * 0.125;
    // worley /= 2.5;
    worley = smoothstep(0, 1, worley);

    float gradNoise = 0;
    float m = 0.3;
    float a = m + m * 0.625 + m * 0.225 + m * 0.15;
    float n = gradientNoise(float3(uv, 1) * 4, 4);
    gradNoise += gradientNoise(float3(uv, 1) * _Density      ,   _Density );
    gradNoise += gradientNoise(float3(uv, 0) * _Density * 2  , _Density * 2 ) * 0.625;
    gradNoise += gradientNoise(float3(uv, 0) * _Density * 4  , _Density * 4 ) * 0.225;
    gradNoise += gradientNoise(float3(uv, 0) * _Density * 8  , _Density * 8 ) * 0.15;
    gradNoise += gradientNoise(float3(uv, 0) * _Density * 16 , _Density * 16) * 0.05;
    //gradNoise = remap(gradNoise, -a, a, 0, 1);

    float coverage = 0;
    
    coverage = lerp(1, gradNoise, .5);
    coverage = abs(coverage * 2 - 1);
    //gradNoise = smoothstep(0, 1, gradNoise);
    //gradNoise = saturate(gradNoise * 2);
    coverage = remap(worley, gradNoise, 1,0  , 1);
    coverage = smoothstep( 0, 1, coverage);
    //gradNoise = remap(gradNoise, 0 , 1, worley, 1);
    float map = step(_FallOff, worley);
    float r = remap(worley, _FallOff, 1, 0 , 0.9);
     coverage = remap(coverage, _FallOff, 1, 0, 1);
    coverage *= map;
     coverage = smoothstep(0, 1, coverage);

    gradNoise = remap(gradNoise, -0.3, 0.3, 0, 1);
    gradNoise = remap(gradNoise, worley - 1, 1, 0 , 1);
    
    //noise.x = coverage;
    noise.x = gradNoise;

    
    float w2 = 0;
    w2 += worley2D(uv + float2( 0.513, 0.159), _Density);
    w2 += worley2D(uv + float2( 0.513, 0.159), _Density  * 2 + 2) * 0.625;
    w2 += worley2D(uv + float2( 0.752, 0.293), _Density  * 4 + 3 ) * 0.225;
    w2 += worley2D(uv + float2(-0.233, 0.459), _Density  * 8 + 6) * 0.15;
    w2 *= 0.5;

    
    float d = remap(gradNoise, saturate( w2), 1, worley, 1);
    float highCloud =  remap(d, 0.8 * (1 - _HighAltitudeCloudBias), 1, 0, 0.4) ;
    float medCloud =  remap(d, 0.6 * (1 - _MediumAltitudeCloudBias), 0.8, 0.2, 0.4);
    float lowCloud = remap(d, 0 * (1 - _LowAltitudeCloudBias), 0.6, 0, 0.2);

    float type = saturate(lowCloud)  + saturate(highCloud)  + saturate(medCloud);
    type = saturate(type);
    
    //noise.y = 1;
        
    _weather2D[id.xy] = noise;
}
